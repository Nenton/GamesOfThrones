package com.nenton.gamesofthrones.data.storage;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TV_SERIES".
*/
public class TvSeriesDao extends AbstractDao<TvSeries, Long> {

    public static final String TABLENAME = "TV_SERIES";

    /**
     * Properties of entity TvSeries.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Series = new Property(2, String.class, "series", false, "SERIES");
    }

    private Query<TvSeries> persons_SeriesQuery;

    public TvSeriesDao(DaoConfig config) {
        super(config);
    }
    
    public TvSeriesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TV_SERIES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"SERIES\" TEXT);"); // 2: series
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TV_SERIES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TvSeries entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        String series = entity.getSeries();
        if (series != null) {
            stmt.bindString(3, series);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TvSeries entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        String series = entity.getSeries();
        if (series != null) {
            stmt.bindString(3, series);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TvSeries readEntity(Cursor cursor, int offset) {
        TvSeries entity = new TvSeries( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // series
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TvSeries entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setSeries(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TvSeries entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TvSeries entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TvSeries entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "series" to-many relationship of Persons. */
    public List<TvSeries> _queryPersons_Series(String name) {
        synchronized (this) {
            if (persons_SeriesQuery == null) {
                QueryBuilder<TvSeries> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Name.eq(null));
                persons_SeriesQuery = queryBuilder.build();
            }
        }
        Query<TvSeries> query = persons_SeriesQuery.forCurrentThread();
        query.setParameter(0, name);
        return query.list();
    }

}
